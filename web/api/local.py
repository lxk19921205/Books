"""
@author: Andriy Lin
@description: Parsing the data imported from local files.
"""

import re
from HTMLParser import HTMLParser


class _Stack(object):
    """ A tiny Stack data structure. """

    def __init__(self):
        super(_Stack, self).__init__()
        self._stack = []
        return

    def push(self, data):
        self._stack.append(data)
        return

    def pop(self):
        self._stack.pop()
        return

    def top(self):
        if len(self._stack) > 0:
            return self._stack[-1]
        else:
            return None


class _Data(object):
    """ Temp object saving the parsing results. """

    def __init__(self):
        self.title = None
        self.tags = []
        self.douban_id = None


class _GoogleDocsParser(HTMLParser):
    """ Parsing the local data generated by Google Docs. """

    def __init__(self):
        HTMLParser.__init__(self)

        self._tag_stack = _Stack()
        self._data_parsed = []
        self._data_parsing = None

        # counting td tag
        self._counter = 0
        return

    def get_results(self):
        return self._data_parsed

    def handle_starttag(self, tag, attrs):
        self._tag_stack.push(tag)
        if tag == 'tr':
            # start a new row
            self._data_parsing = _Data()
            self._counter = 0
        elif tag == 'td':
            # encounter a new data
            self._counter += 1
        return

    def handle_endtag(self, tag):
        self._tag_stack.pop()
        if tag == 'tr':
            # ends the current row
            data = self._data_parsing
            if data.douban_id:
                result = (data.douban_id, ' '.join(data.tags))
                self._data_parsed.append(result)
            self._data_parsing = None
        elif tag == 'td':
            # ends the current data
            pass
        return

    def handle_data(self, data):
        current_tag = self._tag_stack.top()
        if current_tag == 'td' or current_tag == 'a':
            # only now the data is meaningful
            if self._counter == 2:
                # title
                pass
                # self._data_parsing.title = data
            elif self._counter == 3:
                # "Type" => tag 1
                self._data_parsing.tags.append(data)
            elif self._counter == 4:
                # "Douban" => douban_id
                pat = r'book.douban.com/subject/(\d+)/'
                match = re.search(pat, data)
                if match:
                    self._data_parsing.douban_id = match.group(1)
            elif self._counter == 9:
                # "Memo" => tag 2
                self._data_parsing.tags.append(data)
        return


def parse(data):
    """ Parse the provided data into book information.
        @param data: html code in text (unicode)
        @returns: a list of (douban_id, tag_string), tag_string separated by spaces
    """
    pat = r'<tbody>([\s\S]*)</tbody>'
    rows = re.search(pat, data)
    if not rows:
        return []
    data = rows.group(1)

    # all I am trying to do is just to make sure that last time's parsing won't affect this time!!!
    myparser = _GoogleDocsParser()
    myparser.feed(data)
    myparser.close()
    return myparser.get_results()
